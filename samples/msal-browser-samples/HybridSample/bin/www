#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('hybridsample:server');
var http = require('http');

const argv = require('yargs')
  .usage('Usage: $0 -sample [sample-name] -p [PORT] -https')
  .alias('hyb', 'Hybrid sample type: Regular')
  .alias('wam', 'Hybrid sampe type: With WAM Flow')
  .alias('p', 'port')
  .alias('h', 'https')
  .describe('sample', '(Optional) Name of sample to run')
  .describe('port', '(Optional) Port Number - default is 30662')
  .describe('https', '(Optional) Serve over https')
  .strict()
  .argv;


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || argv.p || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
let server;
if (argv.https) {
  const https = require('https');
  const fs = require('fs');

  /**
   * Secrets should never be hardcoded. The dotenv npm package can be used to store secrets or certificates
   * in a .env file (located in project's root directory) that should be included in .gitignore to prevent
   * accidental uploads of the secrets.
   * 
   * Certificates can also be read-in from files via NodeJS's fs module. However, they should never be
   * stored in the project's directory. Production apps should fetch certificates from
   * Azure KeyVault (https://azure.microsoft.com/products/key-vault), or other secure key vaults.
   * 
   * Please see "Certificates and Secrets" (https://learn.microsoft.com/azure/active-directory/develop/security-best-practices-for-app-registration#certificates-and-secrets)
   * for more information.
  */
  const privateKey = fs.readFileSync('<path_to_key>/certs/key.pem', 'utf8');
  const certificate = fs.readFileSync('<path_to_key>/certs/cert.pem', 'utf8');
  const credentials = { key: privateKey, cert: certificate };
  server = https.createServer(credentials, app);
} else {
  server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
